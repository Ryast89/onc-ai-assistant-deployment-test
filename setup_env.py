#!/usr/bin/env python3
"""
Environment Setup Helper for ONC RAG Pipeline
============================================

This script helps users set up their environment variables interactively.
"""

import os
import shutil
from pathlib import Path


def setup_environment():
    """Interactive setup for environment variables."""
    print("üåä ONC RAG Pipeline Environment Setup")
    print("=" * 50)
    
    env_file = Path('.env')
    template_file = Path('.env.template')
    
    # Check if .env already exists
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Copy template if it exists
    if template_file.exists():
        shutil.copy(template_file, env_file)
        print("‚úÖ Copied .env.template to .env")
    else:
        # Create basic .env file
        with open(env_file, 'w') as f:
            f.write("# ONC RAG Pipeline Environment Variables\n\n")
        print("‚úÖ Created new .env file")
    
    print("\nüìù Please provide your API keys:")
    print("(Press Enter to skip optional keys)")
    
    # Collect API keys
    api_keys = {}
    
    # Groq API Key
    groq_key = input("\nü§ñ Groq API Key (required for Groq LLM): ").strip()
    if groq_key:
        api_keys['GROQ_API_KEY'] = groq_key
    
    # OpenAI API Key
    openai_key = input("üß† OpenAI API Key (required for embeddings): ").strip()
    if openai_key:
        api_keys['OPENAI_API_KEY'] = openai_key
    
    # Optional ONC API Token
    onc_token = input("üåä ONC API Token (optional): ").strip()
    if onc_token:
        api_keys['ONC_API_TOKEN'] = onc_token
    
    # Optional configuration
    log_level = input("üìä Log Level (INFO/DEBUG/WARNING/ERROR, default: INFO): ").strip() or "INFO"
    api_keys['LOG_LEVEL'] = log_level
    
    doc_dir = input("üìÅ Document directory (default: onc_documents): ").strip() or "onc_documents"
    api_keys['ONC_DOCUMENT_DIR'] = doc_dir
    
    # Write to .env file
    with open(env_file, 'w') as f:
        f.write("# ONC RAG Pipeline Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        for key, value in api_keys.items():
            f.write(f"{key}={value}\n")
        
        # Add optional overrides with defaults
        f.write(f"\n# Optional model overrides\n")
        f.write(f"GROQ_MODEL=llama3-70b-8192\n")
        f.write(f"OPENAI_EMBEDDING_MODEL=text-embedding-ada-002\n")
    
    print(f"\n‚úÖ Environment variables saved to {env_file}")
    
    # Validate setup
    if not groq_key and not openai_key:
        print("\n‚ö†Ô∏è  Warning: No LLM API keys provided!")
        print("   You need at least one of GROQ_API_KEY or OPENAI_API_KEY")
    
    if not openai_key:
        print("\n‚ö†Ô∏è  Warning: No OpenAI API key provided!")
        print("   OpenAI embeddings will not work without this key")
    
    print("\nüéâ Setup complete!")
    print("\nNext steps:")
    print("1. Install dependencies: pip install -r requirements.txt")
    print("2. Test environment: python onc_rag_pipeline.py --env-check")
    print("3. Run pipeline: python onc_rag_pipeline.py")


def main():
    """Main function."""
    try:
        setup_environment()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\nError during setup: {e}")


if __name__ == "__main__":
    main()